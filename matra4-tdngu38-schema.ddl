-- Generated by Oracle SQL Developer Data Modeler 4.1.5.907
--   at:        2017-03-31 11:19:47 AEDT
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g

--TIEN DUC NGUYEN, student ID:27141721
--MINH ANH NGUYEN, student ID:25921444
spool 'C:\Users\Trung Nph.DESKTOP-O7A7MH1\Desktop\FIT2077\New folder (2)\output.txt'

DROP TABLE Client CASCADE CONSTRAINTS ;

DROP TABLE Course CASCADE CONSTRAINTS ;

DROP TABLE Employee CASCADE CONSTRAINTS ;

DROP TABLE Job CASCADE CONSTRAINTS ;

DROP TABLE Leave CASCADE CONSTRAINTS ;

DROP TABLE Manager CASCADE CONSTRAINTS ;

DROP TABLE Personal_leave CASCADE CONSTRAINTS ;

DROP TABLE Review CASCADE CONSTRAINTS ;

DROP TABLE Sal_history CASCADE CONSTRAINTS ;

DROP TABLE Speciality_code CASCADE CONSTRAINTS ;

DROP TABLE Support CASCADE CONSTRAINTS ;

DROP TABLE Training_leave CASCADE CONSTRAINTS ;

DROP TABLE Vacation_leave CASCADE CONSTRAINTS ;

DROP TABLE WORK CASCADE CONSTRAINTS ;

CREATE TABLE Client
  (
    client_no         NUMBER (7) NOT NULL ,
    client_gname      VARCHAR2 (255) NOT NULL ,
    client_fname      VARCHAR2 (255) NOT NULL ,
    client_contact_no NUMBER (10) NOT NULL ,
    client_postcode   NUMBER (4) NOT NULL ,
    client_state      VARCHAR2 (3 CHAR) NOT NULL ,
    client_city       VARCHAR2 (20 CHAR) NOT NULL ,
    client_address    VARCHAR2 (255 CHAR) NOT NULL
  ) ;
ALTER TABLE Client ADD CONSTRAINT Client_PK PRIMARY KEY ( client_no ) ;


CREATE TABLE Course
  (
    Course_no   NUMBER (7) NOT NULL ,
    Course_name VARCHAR2 (255) NOT NULL ,
    Course_cost NUMBER (8,2) NOT NULL
  ) ;
ALTER TABLE Course ADD CONSTRAINT Course_PK PRIMARY KEY ( Course_no ) ;


CREATE TABLE Employee
  (
    emp_no         NUMBER (7) NOT NULL ,
    emp_gname      VARCHAR2 (24) NOT NULL ,
    emp_fname      VARCHAR2 (24) NOT NULL ,
    emp_dob        DATE NOT NULL ,
    emp_salary     NUMBER (9,2) NOT NULL ,
    emp_leave_bal  NUMBER (10,2) NOT NULL ,
    emp_is_M       CHAR (1) NOT NULL ,
    emp_is_S       CHAR (1) NOT NULL ,
    Manager_emp_no NUMBER (7) NOT NULL
  ) ;
ALTER TABLE Employee ADD CONSTRAINT Emp_is_M_chk CHECK ( emp_is_M IN ('N', 'Y')) ;
ALTER TABLE Employee ADD CONSTRAINT Emp_is_S CHECK ( emp_is_S     IN ('N', 'Y')) ;
COMMENT ON COLUMN Employee.emp_salary
IS
  'Salary. Precision 12, Scale 2 => Range from: 0 -> 9999999.99' ;
  COMMENT ON COLUMN Employee.emp_is_M
IS
  'Overlap. Check if Employee is Manager (M), or Support (S). 1 is M, 0 is S.' ;
  COMMENT ON COLUMN Employee.emp_is_S
IS
  'Overlap. Check if Employee is Manager (M), or Support (S). 1 is M, 0 is S.' ;
ALTER TABLE Employee ADD CONSTRAINT Employee_PK PRIMARY KEY ( emp_no ) ;


CREATE TABLE Job
  (
    job_no                    NUMBER (4) NOT NULL ,
    job_name                  VARCHAR2 (24) NOT NULL ,
    job_desc                  VARCHAR2 (255 CHAR) ,
    Speciality_code_spec_code CHAR (3) NOT NULL ,
    Client_client_no          NUMBER (7) NOT NULL
  ) ;
ALTER TABLE Job ADD CONSTRAINT Job_PK PRIMARY KEY ( job_no ) ;


CREATE TABLE Leave
  (
    leave_no        NUMBER (7) NOT NULL ,
    Start_date      DATE NOT NULL ,
    End_date        DATE NOT NULL ,
    leave_paid      CHAR (1) NOT NULL ,
    Leave_type      CHAR (1) NOT NULL ,
    Employee_emp_no NUMBER (7) NOT NULL
  ) ;
ALTER TABLE Leave ADD CHECK ( leave_paid                       IN ('N', 'Y')) ;
ALTER TABLE Leave ADD CONSTRAINT Leave_type CHECK ( Leave_type IN ('P', 'T', 'V')) ;
COMMENT ON COLUMN Leave.Leave_type
IS
  'T, P or V' ;
ALTER TABLE Leave ADD CONSTRAINT Leave_PK PRIMARY KEY ( leave_no ) ;


CREATE TABLE Manager
  (
    emp_no         NUMBER (7) NOT NULL ,
    num_emp_sup    NUMBER (3) NOT NULL ,
    date_appointed DATE NOT NULL
  ) ;
COMMENT ON COLUMN Manager.num_emp_sup
IS
  'Number of employees' ;
ALTER TABLE Manager ADD CONSTRAINT Manager_PK PRIMARY KEY ( emp_no ) ;


CREATE TABLE Personal_leave
  (
    leave_no          NUMBER (7) NOT NULL ,
    leave_sick        CHAR (1) NOT NULL ,
    leave_contactable CHAR (1) NOT NULL
  ) ;
ALTER TABLE Personal_leave ADD CHECK ( leave_sick        IN ('N', 'Y')) ;
ALTER TABLE Personal_leave ADD CHECK ( leave_contactable IN ('N', 'Y')) ;
COMMENT ON COLUMN Personal_leave.leave_contactable
IS
  'Y or N' ;
ALTER TABLE Personal_leave ADD CONSTRAINT Personal_leave_PK PRIMARY KEY ( leave_no ) ;


CREATE TABLE Review
  (
    rev_no          NUMBER (6) NOT NULL ,
    rev_date        DATE NOT NULL ,
    rev_rating      CHAR (1) NOT NULL ,
    Manager_emp_no1 NUMBER (7) NOT NULL ,
    Manager_emp_no  NUMBER (7) NOT NULL
  ) ;
ALTER TABLE Review ADD CONSTRAINT chk_rev_rating CHECK ( rev_rating IN ('N', 'P', 'S')) ;
ALTER TABLE Review ADD CONSTRAINT Review_PK PRIMARY KEY ( rev_no ) ;


CREATE TABLE Sal_history
  (
    sal_no          NUMBER (7) NOT NULL ,
    sal_date        DATE NOT NULL ,
    sal_amount      NUMBER (10,2) NOT NULL ,
    Employee_emp_no NUMBER (7) NOT NULL
  ) ;
ALTER TABLE Sal_history ADD CONSTRAINT Sal_history_PK PRIMARY KEY ( sal_no ) ;


CREATE TABLE Speciality_code
  (
    spec_code CHAR (3) NOT NULL ,
    spec_name VARCHAR2 (20) NOT NULL
  ) ;
ALTER TABLE Speciality_code ADD CONSTRAINT Speciality_code_PK PRIMARY KEY ( spec_code ) ;


CREATE TABLE Support
  (
    emp_no                    NUMBER (7) NOT NULL ,
    hour_rate                 NUMBER (3,1) NOT NULL ,
    avg_rating                NUMBER (3,1) NOT NULL ,
    Speciality_code_spec_code CHAR (3) NOT NULL ,
    support_hours             NUMBER (4,2) NOT NULL
  ) ;
 
ALTER TABLE Support ADD CONSTRAINT Support_PK PRIMARY KEY ( emp_no ) ;


CREATE TABLE Training_leave
  (
    leave_no         NUMBER (7) NOT NULL ,
    course_comp      CHAR (1) NOT NULL ,
    Course_Course_no NUMBER (7) NOT NULL
  ) ;
ALTER TABLE Training_leave ADD CHECK ( course_comp IN ('N', 'Y')) ;
COMMENT ON COLUMN Training_leave.course_comp
IS
  'Y or N' ;
ALTER TABLE Training_leave ADD CONSTRAINT Training_leave_PK PRIMARY KEY ( leave_no ) ;


CREATE TABLE Vacation_leave
  (
    leave_no   NUMBER (7) NOT NULL ,
    In_country CHAR (1) ,
    leave_cost NUMBER (8,1)
  ) ;
ALTER TABLE Vacation_leave ADD CHECK ( In_country IN ('N', 'Y')) ;
ALTER TABLE Vacation_leave ADD CONSTRAINT Vacation_leave_PK PRIMARY KEY ( leave_no ) ;


CREATE TABLE WORK
  (
    work_rating    NUMBER (3,1) NOT NULL ,
    Support_emp_no NUMBER (7) NOT NULL ,
    Job_job_no     NUMBER (4) NOT NULL ,
    work_hour      NUMBER (4,2) NOT NULL
  ) ;
ALTER TABLE WORK ADD CHECK ( work_rating BETWEEN 1.0 AND 10.0) ;
ALTER TABLE WORK ADD CONSTRAINT Work_PK PRIMARY KEY ( Job_job_no, Support_emp_no ) ;


ALTER TABLE Employee ADD CONSTRAINT Employee_Manager_FK FOREIGN KEY ( Manager_emp_no ) REFERENCES Manager ( emp_no ) ;

ALTER TABLE Job ADD CONSTRAINT Job_Client_FK FOREIGN KEY ( Client_client_no ) REFERENCES Client ( client_no ) ON
DELETE CASCADE ;

ALTER TABLE Job ADD CONSTRAINT Job_Speciality_code_FK FOREIGN KEY ( Speciality_code_spec_code ) REFERENCES Speciality_code ( spec_code ) ;

ALTER TABLE Leave ADD CONSTRAINT Leave_Employee_FK FOREIGN KEY ( Employee_emp_no ) REFERENCES Employee ( emp_no ) ON
DELETE CASCADE ;

ALTER TABLE Manager ADD CONSTRAINT Manager_Employee_FK FOREIGN KEY ( emp_no ) REFERENCES Employee ( emp_no ) ;

ALTER TABLE Personal_leave ADD CONSTRAINT Personal_leave_Leave_FK FOREIGN KEY ( leave_no ) REFERENCES Leave ( leave_no ) ;

ALTER TABLE Review ADD CONSTRAINT Review_Manager_FK FOREIGN KEY ( Manager_emp_no ) REFERENCES Manager ( emp_no ) ON
DELETE CASCADE ;

ALTER TABLE Review ADD CONSTRAINT Review_Manager_FKv1 FOREIGN KEY ( Manager_emp_no1 ) REFERENCES Manager ( emp_no ) ON
DELETE CASCADE ;

ALTER TABLE Sal_history ADD CONSTRAINT Sal_history_Employee_FK FOREIGN KEY ( Employee_emp_no ) REFERENCES Employee ( emp_no ) ON
DELETE CASCADE ;

ALTER TABLE Support ADD CONSTRAINT Support_Employee_FK FOREIGN KEY ( emp_no ) REFERENCES Employee ( emp_no ) ;

ALTER TABLE Support ADD CONSTRAINT Support_Speciality_code_FK FOREIGN KEY ( Speciality_code_spec_code ) REFERENCES Speciality_code ( spec_code ) ;

ALTER TABLE Training_leave ADD CONSTRAINT Training_leave_Course_FK FOREIGN KEY ( Course_Course_no ) REFERENCES Course ( Course_no ) ;

ALTER TABLE Training_leave ADD CONSTRAINT Training_leave_Leave_FK FOREIGN KEY ( leave_no ) REFERENCES Leave ( leave_no ) ;

ALTER TABLE Vacation_leave ADD CONSTRAINT Vacation_leave_Leave_FK FOREIGN KEY ( leave_no ) REFERENCES Leave ( leave_no ) ;

ALTER TABLE WORK ADD CONSTRAINT Work_Job_FK FOREIGN KEY ( Job_job_no ) REFERENCES Job ( job_no ) ;

ALTER TABLE WORK ADD CONSTRAINT Work_Support_FK FOREIGN KEY ( Support_emp_no ) REFERENCES Support ( emp_no ) ON
DELETE CASCADE ;

Drop Sequence Client_client_no_SEQ;
Drop Sequence Course_Course_no_SEQ;
Drop Sequence Employee_emp_no_SEQ;
Drop Sequence Job_job_no_SEQ;
Drop Sequence Leave_leave_no_SEQ;
Drop Sequence Review_rev_no_SEQ;
Drop Sequence Sal_history_sal_no_SEQ;
Drop Sequence Speciality_code_spec_code_SEQ;
CREATE SEQUENCE Client_client_no_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER Client_client_no_TRG BEFORE
  INSERT ON Client FOR EACH ROW WHEN (NEW.client_no IS NULL) BEGIN :NEW.client_no := Client_client_no_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE Course_Course_no_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER Course_Course_no_TRG BEFORE
  INSERT ON Course FOR EACH ROW WHEN (NEW.Course_no IS NULL) BEGIN :NEW.Course_no := Course_Course_no_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE Employee_emp_no_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER Employee_emp_no_TRG BEFORE
  INSERT ON Employee FOR EACH ROW WHEN (NEW.emp_no IS NULL) BEGIN :NEW.emp_no := Employee_emp_no_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE Job_job_no_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER Job_job_no_TRG BEFORE
  INSERT ON Job FOR EACH ROW WHEN (NEW.job_no IS NULL) BEGIN :NEW.job_no := Job_job_no_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE Leave_leave_no_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER Leave_leave_no_TRG BEFORE
  INSERT ON Leave FOR EACH ROW WHEN (NEW.leave_no IS NULL) BEGIN :NEW.leave_no := Leave_leave_no_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE Review_rev_no_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER Review_rev_no_TRG BEFORE
  INSERT ON Review FOR EACH ROW WHEN (NEW.rev_no IS NULL) BEGIN :NEW.rev_no := Review_rev_no_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE Sal_history_sal_no_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER Sal_history_sal_no_TRG BEFORE
  INSERT ON Sal_history FOR EACH ROW WHEN (NEW.sal_no IS NULL) BEGIN :NEW.sal_no := Sal_history_sal_no_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE Speciality_code_spec_code_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER Speciality_code_spec_code_TRG BEFORE
  INSERT ON Speciality_code FOR EACH ROW WHEN (NEW.spec_code IS NULL) BEGIN :NEW.spec_code := Speciality_code_spec_code_SEQ.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER ARC_FKArc_3_Personal_leave BEFORE
  INSERT OR
  UPDATE OF leave_no ON Personal_leave FOR EACH ROW DECLARE d CHAR (1);
  BEGIN
    SELECT A.Leave_type INTO d FROM Leave A WHERE A.leave_no = :new.leave_no;
    IF (d IS NULL OR d <> 'P') THEN
      raise_application_error(-20223,'FK Personal_leave_Leave_FK in Table Personal_leave violates Arc constraint on Table Leave - discriminator column Leave_type doesn''t have value ''P''');
    END IF;
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    NULL;
  WHEN OTHERS THEN
    RAISE;
  END;
  /
CREATE OR REPLACE TRIGGER ARC_FKArc_3_Training_leave BEFORE
  INSERT OR
  UPDATE OF leave_no ON Training_leave FOR EACH ROW DECLARE d CHAR (1);
  BEGIN
    SELECT A.Leave_type INTO d FROM Leave A WHERE A.leave_no = :new.leave_no;
    IF (d IS NULL OR d <> 'T') THEN
      raise_application_error(-20223,'FK Training_leave_Leave_FK in Table Training_leave violates Arc constraint on Table Leave - discriminator column Leave_type doesn''t have value ''T''');
    END IF;
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    NULL;
  WHEN OTHERS THEN
    RAISE;
  END;
  /
CREATE OR REPLACE TRIGGER ARC_FKArc_3_Vacation_leave BEFORE
  INSERT OR
  UPDATE OF leave_no ON Vacation_leave FOR EACH ROW DECLARE d CHAR (1);
  BEGIN
    SELECT A.Leave_type INTO d FROM Leave A WHERE A.leave_no = :new.leave_no;
    IF (d IS NULL OR d <> 'V') THEN
      raise_application_error(-20223,'FK Vacation_leave_Leave_FK in Table Vacation_leave violates Arc constraint on Table Leave - discriminator column Leave_type doesn''t have value ''V''');
    END IF;
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    NULL;
  WHEN OTHERS THEN
    RAISE;
  END;
  /
  spool off



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            14
-- CREATE INDEX                             0
-- ALTER TABLE                             41
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                          11
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          8
-- CREATE MATERIALIZED VIEW                 0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
